This system would have 3 parts: a frontend, backend, and database. The frontend would be a web application that is responsible for representing the data, formatting it nicely, and making everything visually appealing. Users would be able to view the real-time stats on the frontend. The frontend will be built using any web framework, such as React or Angular.

The backend would be responsible for collecting and processing the game data. It will make API calls to the database to fetch the necessary information, process it appropriately to send to the frontend, and do these steps all over again if the frontend were to make another request. The backend will be built using a scalable technology, such as Node.js or Python.

The database is where all the information would be stored. It will most likely be a NoSQL database as it is more efficient at storing/retrieving data when there are a lot of users. DynamoDB would be preferred, personally, for the database as it is easily scalable and well-suited for storing large amounts of data that is frequently changing. It being a scalable technology with AWS is also a plus. However, any NoSQL database will do.

There are a few issues that might affect the system if the application were to be accessed by 10,000 users simultaneously. Firstly the database or backend could become overloaded. When there are that many users making simultaneous requests, it might introduce severe lag or delays. Because of delays in the backend the frontend might experience higher latency. This is why it is best to use scalable technologies to implement this system, because if the number of users were to dramatically increase we would be able to handle that much load with minimal disruptions and adjustments to the current architecture.

To mitigate these issues we can implement a couple other measures besides scalable technologies. The first being a caching mechanism. If we can cache information that multiple users are frequently accessing, that will make the entire system more efficient. We can also implement load balancing to distribute the traffic across multiple servers. 

In conclusion, this is how I would go about architecting this system and its requirements. A few other things I would think about is the latency requirements of the system, if there are any. As there are many users of this system I would implement some security measures which could be as simple as a unique username and password. When designing a system cost and maintenance requirements should always be considered, and the potential tradeoffs.